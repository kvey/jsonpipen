#!/usr/bin/env node

/*=========================

JSON Inferface

=========================*/

var com = require('commander'),
    pkg = require('../package.json');

//=========================
// Initialize

com
  .version(pkg.version)
  .option('-r, --read', 'Output as line by line representation for use with grep and other line tools')
  .parse(process.argv);

process.stdin.resume();
process.stdin.setEncoding('utf8');

//=====
//=========================



//=========================
// Helper Functions

function tnl(string){
  return "\t" + string + "\n";
}

//====
//=========================



//=========================
// Main

var data = "";
process.stdin.on('data', function(chunk){
  data += chunk;
});

process.stdin.on('end', function(){
  try{
    var parsed = JSON.parse(data);
  }catch(err){
    console.error("Malformed JSON");
    process.exit(1);
  }

  var final;
  if(com.args[0]){
    try{
      var selector = new Function( "object", "return object." + com.args[0]);
      final = selector(parsed);
    }catch(err){
      console.error("Incorrectly formatted address");
      process.exit(1);
    }
  }else{
    final = parsed;
  }
  if(!com.read){
    process.stdout.write(JSON.stringify(final, null, 2));
  }else{
    var lines = [];
    var path = "/";
    (function recurRead(obj, path){
      if(typeof obj == 'string'){
        lines.push(obj + '\n');
      }else if(typeof obj == 'number' || typeof obj == 'boolean' || obj === null){
        lines.push(JSON.stringify(obj) + '\n');
      }else{
        for(var k in obj){
          var sectionPath = path;
          if(obj.hasOwnProperty(k)){
            if(typeof obj[k] == 'object' && typeof obj[k] !== null){
              if(Array.isArray(obj[k])){
                sectionPath += k+"/";
                lines.push(sectionPath + tnl("[]"));
                recurRead(obj[k], sectionPath);
              }else{
                sectionPath += k+"/";
                lines.push(sectionPath + tnl("{}"));
                recurRead(obj[k], sectionPath);
              }
            }else{
              var fieldPath = path + k + "/";
              lines.push(fieldPath + tnl(obj[k]));
            }
          }
        }
      }
    }(final, path));
    for(var i=0; i<lines.length ; i++){
      process.stdout.write(lines[i]);
    }
  }
});

//=====
//=========================
